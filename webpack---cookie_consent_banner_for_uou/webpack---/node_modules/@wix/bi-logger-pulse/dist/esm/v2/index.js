/**
 * A function to create a log object for the 'webVitalsReport18011' event (evid: 180)
 *
 * Event description: The event will be sent 1 time for any load from the viewer / BM. the web vitals can be change over time and will be sent in a json dictionary.
 *
 * @param {webVitalsReport18011Params} params - The parameters for this event
 * @property {number} inpProcessingStart - inp_processing_start
 * @property {number} inpValue - inp_value
 * @property {string} clsComponentType - cls_component_type
 * @property {string} inpApplicationId - inp_application_id
 * @property {number} lcp - lcp
 * @property {string} inpWidgetId - inp_widget_id
 * @property {number} inpProcessingEnd - inp_processing_end
 * @property {number} inpInteractionId - inp_interaction_id
 * @property {string} clsLargestShiftVal - cls_largest_shift_val
 * @property {Url} url - The site url
 * @property {number} ttfb - ttfb
 * @property {string} clsLargestShiftTarget - cls_largest_shift_target
 * @property {number} fcp - fcp
 * @property {string} inpUrl - inp_url
 * @property {number} lcpSize - lcp_size
 * @property {number} lcpResourceLoadDelay - lcp_resource_load_delay
 * @property {string} inpTargetSelector - inp_target_selector
 * @property {string} lcpComponentType - lcp_component_type
 * @property {string} webVitals - A Json dictionary of all the web vitals google is following on. example -  {“Measure”:value,” Measure:value”..}
 * @property {string} clsApplicationId - cls_application_id
 * @property {number} lcpResourceLoadTime - lcp_resource_load_time
 * @property {string} inpEventType - inp_event_type
 * @property {string} lcpUrl - lcp_url
 * @property {string} lcpTag - lcp_tag
 * @property {string} clsRating - cls_rating
 * @property {string} navType - nav_type
 * @property {string} lcpWidgetId - lcp_widget_id
 * @property {GUID} sessionId - session_id
 * @property {boolean} isSoftNavEnabled - is_soft_nav_enabled
 * @property {string} metadata - Json dictionary of metadata
 * @property {string} lcpApplicationId - lcp_application_id
 * @property {string} inpComponentType - inp_component_type
 * @property {string} lcpRating - lcp_rating
 * @property {number} clsLargestShiftTime - cls_largest_shift_time
 * @property {string} lcpContentType - lcp_content_type
 * @property {number} inpStartTime - inp_start_time
 * @property {string} inpLoadState - inp_load_state
 * @property {number} lcpElementRenderDelay - lcp_element_render_delay
 * @property {string} clsWidgetId - cls_widget_id
 * @property {string} clsVal - cls_val
 * @property {string} platform - viewer / BM
 * @property {string} lcpInitiatorType - lcp_initiator_type
 * @property {string} inpRating - inp_rating
 * @property {string} navigationId - navigation_id
 * @return {LogObject<webVitalsReport18011Params>} LogObject<webVitalsReport18011Params>
 */
export function webVitalsReport18011(params) {
    return {
        evid: 180,
        src: 11,
        endpoint: 'pulse',
        params: params
    };
}
/**
 * A function to create a log object for the 'webVitalsReport180' event (evid: 180)
 *
 * Event description: The event will be sent 1 time for any load from the viewer / BM. the web vitals can be change over time and will be sent in a json dictionary.
 *
 * @param {webVitalsReport180Params} params - The parameters for this event
 * @property {number} inpProcessingStart - The time at which event triggered by the interaction is dispatched. This is when event handlers are about to be executed.
 * @property {number} inpValue - The inp value
 * @property {number} inpInputDelay - Time that passed between the interaction until the browser was able to trigger event dispatch
 * @property {string} clsComponentType - Eclosing component type of an element that CAUSED largest layout shift
 * @property {string} inpApplicationId - Application ID of an app in which the interacted html element is rendered
 * @property {number} lcp - The lcp Value
 * @property {string} inpWidgetId - Enclosing widget id of an element that was interacted with
 * @property {number} lcpResourceLoadDuration - The total time it takes to load the LCP resource itself (if there is one, otherwise 0)
 * @property {number} inpInteractionId - Uniquely identifies a user interaction which triggered a series of associated events. For example a click will trigger a sequence of events - pointerdown, pointerup, and click.
 * @property {number} ttfbDnsDuration - The total time to resolve the DNS for the current request.
 * @property {number} inpNextPaintTime - Timestamp of when the next frame was painted on a screen
 * @property {string} clsLargestShiftVal - The clsLargestShift value
 * @property {boolean} inpIsDuringNavigation - Whether the INP happens during a navigation
 * @property {Url} url - The canonical page URL
 * @property {number} ttfb - The ttfb Value
 * @property {number} ttfbConnectionDuration - The total time to create the connection to the requested domain.
 * @property {string} clsLargestShiftTarget - The cls_largest_shift_target value
 * @property {number} fcp - The fcp Value
 * @property {string} inpUrl - inp Url
 * @property {number} lcpSize - The intrinsic size of the element returned as the area (width * height).
 * @property {number} lcpResourceLoadDelay - The delta between TTFB and when the browser starts loading the LCP resource (if there is one, otherwise 0)
 * @property {string} lcpResourceDeliveryType - Indicates how the resource was delivered — for example from the browser cache or from a navigational prefetch.
 * @property {string} inpInteractionType - The type of interaction, based on the event type of the `event` entry  that corresponds to the interaction (i.e. the first `event` entry containing an `interactionId` dispatched in a given animation frame).  For "pointerdown", "pointerup", or "click" events this will be "pointer",  and for "keydown" or "keyup" events this will be "keyboard".
 * @property {number} ttfbRequestDuration - The total time from when the request was sent until the first byte of the response was received. This includes network time as well as server processing time.
 * @property {string} inpTargetSelector - The inpTargetSelector value
 * @property {string} inpLoafs - JSON array of INP related Long Animation Frames
 * @property {number} ttfbWaitingDuration - The total time from when the user initiates loading the page to when the DNS lookup begins. This includes redirects, service worker startup, and HTTP cache lookup times.
 * @property {string} lcpComponentType - Eclosing component type of the LCP element
 * @property {string} webVitals - A Json dictionary of all the web vitals google is following on. example - {“Measure”:value,” Measure:value”..}
 * @property {number} lcpResourceTransferSize - Size of the fetched LCP resource in bytes.
 * @property {string} clsApplicationId - Application ID of an app in which the interacted html element is rendered
 * @property {number} lcpResourceLoadTime - The total time it takes to load the LCP resource itself (if there is one, otherwise 0)
 * @property {string} inpEventType - The `type` of the `event` dispatched corresponding to INP
 * @property {string} lcpUrl - The URL (if applicable) of the LCP image resource
 * @property {string} lcpTag - HTML Element type (span/p/img/picture etc.)
 * @property {number} lcpResourceResponseStart - A timestamp immediately after the browser receives the first byte of the response from the server, cache, or local resource.
 * @property {string} clsRating - 'good' | 'needs-improvement' | 'poor'
 * @property {string} navType - 'navigate' | 'reload' | 'back-forward' | 'back-forward-cache' | 'prerender' | 'restore' | 'soft-navigation'
 * @property {number} inpProcessingDuration - Time that passed between first event dispatch until the last event handler has finished its execution
 * @property {string} lcpWidgetId - Enclosing widget id of the LCP element
 * @property {GUID} sessionId - session id
 * @property {string} lcpLoafs - JSON array of LCP related Long Animation Frames.
 * @property {number} lcpResourceRequestStart - A timestamp of the time immediately before the browser starts requesting the resource from the server, cache, or local resource
 * @property {boolean} isSoftNavEnabled - True is it is Soft Nav Enabled
 * @property {string} metadata - Stringified JSON object containing dynamic data
 * @property {string} lcpResourceServerTiming - A semicolon separated list of server timings. These are set by server that is sending the LCP resource and can be used to determine cache hits/misses.
 * @property {string} lcpApplicationId - Application ID of an app in which the interacted html element is rendered
 * @property {string} inpComponentType - Eclosing component type of an element that was interacted with
 * @property {number} inpPresentationDelay - Time that passed between last event handler execution until the next frame is painted on the screen
 * @property {string} lcpRating - 'good' | 'needs-improvement' | 'poor'
 * @property {number} clsLargestShiftTime - When the largest layout shift occured
 * @property {string} lcpContentType - jpeg | png | gif | svg | webp | other
 * @property {number} deviceMemory - The approximate amount of device memory in gigabytes. Our only way to estimate device compute power.
 * @property {number} inpStartTime - The time when the user interacted for the event corresponding to INP
 * @property {string} inpLoadState - The inp_load_state value
 * @property {number} lcpElementRenderDelay - The delta between when the LCP resource finishes loading until the LCP element is fully rendered
 * @property {string} effectiveNetworkType - The effective type of the connection meaning one of slow-2g, 2g, 3g, or 4g. This value is determined using a combination of recently observed, round-trip time and downlink values.
 * @property {string} clsWidgetId - Enclosing widget id of an element that CAUSED largest layout shift
 * @property {string} clsVal - The cls value
 * @property {string} platform - viewer / BM
 * @property {string} lcpInitiatorType - A string representing the web platform feature that initiated the performance entry (css, fetch, body etc.)
 * @property {string} inpRating - 'good' | 'needs-improvement' | 'poor'
 * @property {string} navigationId - The navigation Id
 * @property {number} pageTransferSize - Represents the size (in bytes) of the HTML document that was transferred over the network. This includes the response headers and the body of the document.
 * @property {string} pageTransferProtocol - Indicates the protocol used for the network transfer of the HTML document. Examples include HTTP/1.1, HTTP/2, and HTTP/3.
 * @property {number} pageTTLB - Stands for “Time to Last Byte.” This is the duration (in milliseconds) from the start of the navigation until the browser receives the last byte of the response from the server.
 * @property {number} pageFontCount - The number of font files (e.g., .woff, .woff2, .ttf, .otf, .eot) that were loaded as part of the page’s resources.
 * @property {number} pageFontBytes - The total size (in bytes) of all the font files loaded as part of the page’s resources.
 * @property {number} pageImageCount - The number of image files (e.g., .jpg, .jpeg, .png, .gif, .webp, .svg) that were loaded as part of the page’s resources.
 * @property {number} pageImageBytes - The total size (in bytes) of all the image files loaded as part of the page’s resources.
 * @property {number} pageScriptCount - The number of JavaScript files (e.g., .js, .mjs, .cjs) that were loaded as part of the page’s resources.
 * @property {number} pageScriptBytes - The total size (in bytes) of all the JavaScript files loaded as part of the page’s resources.
 * @property {number} pageBlockingTime - The total blocking time (in milliseconds) caused by long animation frames. This is the sum of the blocking durations of all long tasks (tasks that block the main thread for more than 50 milliseconds) that occurred during the animation frames.
 * @property {string} lcpElementSelector - CSS selector for the LCP element
 * @return {LogObject<webVitalsReport180Params>} LogObject<webVitalsReport180Params>
 */
export function webVitalsReport180(params) {
    return {
        evid: 180,
        src: 72,
        endpoint: 'pulse',
        params: params
    };
}
/**
 * A function to create a log object for the 'pulseInitialized' event (evid: 181)
 *
 * Event description: This event is sent when Pulse library has been initialized
 *
 * @param {pulseInitializedParams} params - The parameters for this event
 * @property {GUID} sessionId - session id
 * @property {string} platform - viewer / BM
 * @return {LogObject<pulseInitializedParams>} LogObject<pulseInitializedParams>
 */
export function pulseInitialized(params) {
    return {
        evid: 181,
        src: 72,
        endpoint: 'pulse',
        params: params
    };
}
/**
 * A function to create a log object for the 'pulseUpdated' event (evid: 182)
 *
 * Event description: Sent when pulse library is updated
 *
 * @param {pulseUpdatedParams} params - The parameters for this event
 * @property {GUID} sessionId - session id
 * @property {string} platform - viewer / BM
 * @return {LogObject<pulseUpdatedParams>} LogObject<pulseUpdatedParams>
 */
export function pulseUpdated(params) {
    return {
        evid: 182,
        src: 72,
        endpoint: 'pulse',
        params: params
    };
}
/**
 * A function to create a log object for the 'pulseError' event (evid: 183)
 *
 * Event description: Sent when an error happens in Pulse library
 *
 * @param {pulseErrorParams} params - The parameters for this event
 * @property {string} step - Where the error happens in the code
 * @property {GUID} sessionId - session id
 * @property {string} message - Error message
 * @property {string} platform - viewer / BM
 * @return {LogObject<pulseErrorParams>} LogObject<pulseErrorParams>
 */
export function pulseError(params) {
    return {
        evid: 183,
        src: 72,
        endpoint: 'pulse',
        params: params
    };
}
//# sourceMappingURL=index.js.map