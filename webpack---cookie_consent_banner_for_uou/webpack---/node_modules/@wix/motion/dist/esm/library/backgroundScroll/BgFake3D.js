import {
    setCompHeightCSSVar
} from '../../utils';
const PERSPECTIVE = '100px';
const TO_Z = 100 / 6;
const PARALLAX_Y_FROM = '10%';
const PARALLAX_Y_TO = 'calc(-0.1 * var(--motion-comp-height, 100%))';
const PERSPECTIVE_ORIGIN_Y_FROM = 'calc(var(--motion-comp-height, 100%) * 0.5 - 80%)';
const PERSPECTIVE_ORIGIN_Y_TO = 'calc(var(--motion-comp-height, 100%) * 1.3)';
export default function create(options, dom) {
    if (dom) {
        setCompHeightCSSVar(dom);
    }
    return [{
        ...options,
        part: 'BG_LAYER',
        easing: 'linear',
        startOffset: {
            name: 'cover',
            offset: {
                type: 'percentage',
                value: 0
            }
        },
        endOffset: {
            name: 'cover',
            offset: {
                type: 'percentage',
                value: 100
            }
        },
        keyframes: [{
            perspective: PERSPECTIVE,
            perspectiveOrigin: `50% ${PERSPECTIVE_ORIGIN_Y_FROM}`
        }, {
            perspective: PERSPECTIVE,
            perspectiveOrigin: `50% ${PERSPECTIVE_ORIGIN_Y_TO}`
        }]
    }, {
        ...options,
        part: 'BG_MEDIA',
        easing: 'linear',
        startOffset: {
            name: 'cover',
            offset: {
                type: 'percentage',
                value: 0
            }
        },
        endOffset: {
            name: 'cover',
            offset: {
                type: 'percentage',
                value: 100
            }
        },
        keyframes: [{
            transform: 'translateY(-100%)'
        }, {
            transform: `translateY(var(--motion-comp-height, 100%))`
        }]
    }, {
        ...options,
        part: 'BG_MEDIA',
        easing: 'sineOut',
        composite: 'add',
        startOffset: {
            name: 'cover',
            offset: {
                type: 'percentage',
                value: 0
            }
        },
        endOffset: {
            name: 'cover',
            offset: {
                type: 'percentage',
                value: 100
            }
        },
        keyframes: [{
            transform: `translateY(${PARALLAX_Y_FROM})`
        }, {
            transform: `translateY(${PARALLAX_Y_TO})`
        }]
    }, {
        ...options,
        part: 'BG_MEDIA',
        easing: 'linear',
        composite: 'add',
        startOffset: {
            name: 'cover',
            offset: {
                type: 'percentage',
                value: 0
            }
        },
        endOffset: {
            name: 'cover',
            offset: {
                type: 'percentage',
                value: 100
            }
        },
        keyframes: [{
            transform: 'scaleY(1.3)'
        }, {
            transform: `scaleY(1)`
        }]
    }, {
        ...options,
        part: 'BG_MEDIA',
        easing: 'sineIn',
        composite: 'add',
        startOffset: {
            name: 'cover',
            offset: {
                type: 'percentage',
                value: 0
            }
        },
        endOffset: {
            name: 'cover',
            offset: {
                type: 'percentage',
                value: 100
            }
        },
        keyframes: [{
            transform: 'translateZ(0px)'
        }, {
            transform: `translateZ(${TO_Z}px)`
        }]
    }];
}
//# sourceMappingURL=BgFake3D.js.map