(self.webpackJsonp__wix_thunderbolt_app = self.webpackJsonp__wix_thunderbolt_app || []).push([
    [1232], {
        45189: function(e, t, i) {
            e.exports = i(10145)
        },
        10145: function(e, t) {
            ! function(e) {
                "use strict";
                e.stringify = function e(t) {
                    function i(e) {
                        return /[^\w-.]/.test(e) ? e.replace(/[^\w-.]/g, (function(e) {
                            return "$" === e ? "!" : (e = e.charCodeAt(0)) < 256 ? "*" + ("00" + e.toString(16)).slice(-2) : "**" + ("0000" + e.toString(16)).slice(-4)
                        })) : e
                    }
                    var a;
                    switch (typeof t) {
                        case "number":
                            return isFinite(t) ? "~" + t : "~null";
                        case "boolean":
                            return "~" + t;
                        case "string":
                            return "~'" + i(t);
                        case "object":
                            if (!t) return "~null";
                            if (a = [], Array.isArray(t)) {
                                for (var o = 0; o < t.length; o++) a[o] = e(t[o]) || "~null";
                                return "~(" + (a.join("") || "~") + ")"
                            }
                            for (var s in t)
                                if (t.hasOwnProperty(s)) {
                                    var n = e(t[s]);
                                    n && a.push(i(s) + n)
                                }
                            return "~(" + a.join("~") + ")";
                        default:
                            return
                    }
                };
                var t = {
                    true: !0,
                    false: !1,
                    null: null
                };
                e.parse = function(e) {
                    if (!e) return e;
                    e = e.replace(/%(25)*27/g, "'");
                    var i = 0,
                        a = e.length;

                    function o(t) {
                        if (e.charAt(i) !== t) throw new Error("bad JSURL syntax: expected " + t + ", got " + (e && e.charAt(i)));
                        i++
                    }

                    function s() {
                        for (var t, o = i, s = ""; i < a && "~" !== (t = e.charAt(i)) && ")" !== t;) switch (t) {
                            case "*":
                                o < i && (s += e.substring(o, i)), "*" === e.charAt(i + 1) ? (s += String.fromCharCode(parseInt(e.substring(i + 2, i + 6), 16)), o = i += 6) : (s += String.fromCharCode(parseInt(e.substring(i + 1, i + 3), 16)), o = i += 3);
                                break;
                            case "!":
                                o < i && (s += e.substring(o, i)), s += "$", o = ++i;
                                break;
                            default:
                                i++
                        }
                        return s + e.substring(o, i)
                    }
                    return function n() {
                        var r, c, l;
                        switch (o("~"), c = e.charAt(i)) {
                            case "(":
                                if (i++, "~" === e.charAt(i))
                                    if (r = [], ")" === e.charAt(i + 1)) i++;
                                    else
                                        do {
                                            r.push(n())
                                        } while ("~" === e.charAt(i));
                                else if (r = {}, ")" !== e.charAt(i))
                                    do {
                                        r[s()] = n()
                                    } while ("~" === e.charAt(i) && ++i);
                                o(")");
                                break;
                            case "'":
                                i++, r = s();
                                break;
                            default:
                                for (l = i++; i < a && /[^)~]/.test(e.charAt(i));) i++;
                                var u = e.substring(l, i);
                                if (/[\d\-]/.test(c)) r = parseFloat(u);
                                else if (void 0 === (r = t[u])) throw new Error("bad value keyword: " + u)
                        }
                        return r
                    }()
                }, e.tryParse = function(t, i) {
                    try {
                        return e.parse(t)
                    } catch (e) {
                        return i
                    }
                }
            }(t)
        },
        41253: function(e, t, i) {
            "use strict";
            i.r(t), i.d(t, {
                AUTH_RESULT_REASON: function() {
                    return _.qd
                },
                BIEvents: function() {
                    return L
                },
                INTERACTIONS: function() {
                    return _.sH
                },
                PrivacyStatus: function() {
                    return Ee.lS
                },
                PrivacyStatusStatus: function() {
                    return A
                },
                Role: function() {
                    return N
                },
                SiteMembersApiSymbol: function() {
                    return D.Np
                },
                Status: function() {
                    return I
                },
                isLoginAcceptableError: function() {
                    return O.qi
                },
                isSignupAcceptableError: function() {
                    return O.NU
                },
                memberDetailsFromDTO: function() {
                    return O.Yv
                },
                page: function() {
                    return We
                },
                site: function() {
                    return qe
                }
            });
            var a = i(77748),
                o = i(20590),
                s = i(32777),
                n = i(32166),
                r = i(87711),
                c = i(6623),
                l = i(9492),
                u = i(75396),
                d = i(10553),
                g = i(79435),
                m = i(39063),
                p = i(82658),
                h = i(46745),
                S = i(63386),
                b = i(71085),
                C = i(73896),
                E = i(45117),
                P = i(45156),
                f = i(45189),
                w = i.n(f);
            var y = i(62155),
                _ = i(66397),
                D = i(19889);
            class v {
                constructor(e, t, i, a, o) {
                    this.propsStore = e, this.structureApi = t, this.siteScrollBlocker = i, this.browserWindow = a, this.cyclicTabbing = o, this.prevCompIds = []
                }
                async displayDialog(e, t, i, a = {}, o) {
                    const s = async () => {
                            (0, p.fU)(this.browserWindow) || (this.activeElementBeforeShowDialog = this.browserWindow.document.activeElement);
                            const a = (0, y.uniqueId)(D.RG);
                            this.propsStore.update({
                                [a]: { ...t,
                                    ...i
                                }
                            }), this.currentCompId && this.cyclicTabbing.disableCyclicTabbing(this.currentCompId), this.cyclicTabbing.enableCyclicTabbing(a), await this.structureApi.addComponentToDynamicStructure(a, {
                                componentType: e,
                                components: []
                            }), this.currentCompId && (o ? this.prevCompIds.push(this.currentCompId) : (this.structureApi.removeComponentFromDynamicStructure(this.currentCompId), this.siteScrollBlocker.setSiteScrollingBlocked(!1, this.currentCompId))), this.siteScrollBlocker.setSiteScrollingBlocked(!0, a), this.currentCompId = a
                        },
                        {
                            shouldWaitForAppDidMount: n,
                            registerToAppDidMount: r
                        } = a;
                    n && r ? r(s) : await s()
                }
                hideDialog(e) {
                    if (this.currentCompId) {
                        if (this.removeComponentFromDynamicStructure(this.currentCompId), e)
                            for (; this.prevCompIds.length > 0;) this.removeComponentFromDynamicStructure(this.prevCompIds.pop());
                        this.currentCompId = this.prevCompIds.pop()
                    }(0, p.fU)(this.browserWindow) || (this.activeElementBeforeShowDialog ? .focus(), this.activeElementBeforeShowDialog = null)
                }
                removeComponentFromDynamicStructure(e) {
                    this.structureApi.removeComponentFromDynamicStructure(e), this.siteScrollBlocker.setSiteScrollingBlocked(!1, e), this.cyclicTabbing.disableCyclicTabbing(e)
                }
            }
            var A, I, N;
            ! function(e) {
                e.UNKNOWN = "UNKNOWN", e.PRIVATE = "PRIVATE", e.PUBLIC = "PUBLIC"
            }(A || (A = {})),
            function(e) {
                e.UNKNOWN = "UNKNOWN", e.PENDING = "PENDING", e.APPROVED = "APPROVED", e.BLOCKED = "BLOCKED", e.OFFLINE = "OFFLINE"
            }(I || (I = {})),
            function(e) {
                e.UNDEFINED_ROLE = "UNDEFINED_ROLE", e.MEMBER = "MEMBER", e.OWNER = "OWNER", e.CONTRIBUTOR = "CONTRIBUTOR"
            }(N || (N = {}));
            var O = i(65788),
                T = i(8145),
                R = i(98323);
            const L = ({
                    sessionManager: e,
                    businessLogger: t,
                    wixBiSession: i,
                    viewMode: a,
                    language: o
                }) => {
                    const s = (t, s) => ({
                        biToken: i.msId,
                        context: t,
                        ts: k(i),
                        viewmode: a,
                        visitor_id: e.getVisitorId(),
                        site_member_id: e.getSiteMemberId(),
                        vsi: i.viewerSessionId,
                        site_settings_lng: o.siteLanguage,
                        browser_lng: o.userLanguage,
                        lng_mismatch: o.siteLanguage !== o.userLanguage,
                        layout: s
                    });
                    return {
                        loginOrSignUpDialogLoaded: (e, i = "fullscreen") => {
                            t.logger.log({
                                src: 5,
                                evid: 658,
                                ...s(e, i)
                            }, {
                                endpoint: "site-members"
                            })
                        },
                        closingDialog: (e, i = "fullscreen") => {
                            t.logger.log({
                                src: 5,
                                evid: 602,
                                form_type: "default",
                                ...s(e, i)
                            }, {
                                endpoint: "site-members"
                            })
                        },
                        emailAuthSubmitClicked: (e, i) => {
                            t.logger.log({
                                src: 5,
                                evid: 603,
                                form_type: "default",
                                ...s(e, i)
                            }, {
                                endpoint: "site-members"
                            })
                        },
                        siteMembersFeatureLoaded: () => {
                            t.logger.log({
                                src: 5,
                                evid: 698,
                                ...s()
                            }, {
                                endpoint: "site-members"
                            })
                        },
                        siteMembersSdkFeatureLoaded: () => {
                            t.logger.log({
                                src: 5,
                                evid: 699,
                                ...s()
                            }, {
                                endpoint: "site-members"
                            })
                        },
                        siteMembersEmailConfirmationNewMembersModalLoad: () => {
                            t.logger.log({
                                src: 5,
                                evid: 1809,
                                ...s()
                            }, {
                                endpoint: "site-members"
                            })
                        },
                        siteMembersEmailConfirmationSendCodeClick: () => {
                            t.logger.log({
                                src: 5,
                                evid: 1810,
                                ...s()
                            }, {
                                endpoint: "site-members"
                            })
                        },
                        siteMembersEmailConfirmationOnResendCodeClick: () => {
                            t.logger.log({
                                src: 5,
                                evid: 1811,
                                ...s()
                            }, {
                                endpoint: "site-members"
                            })
                        }
                    }
                },
                k = e => {
                    const t = e.initialTimestamp || 0;
                    return Date.now() - t
                },
                U = {
                    isCloseable: !0,
                    returnPages: !1
                };
            class M {
                constructor(e, t) {
                    this.shouldRunCustomPopupCloseCallback = !0, this.popups = e, this.onReset = t, this.config = U
                }
                async openPopupPage(e, t) {
                    const i = this.shouldRunCustomPopupCloseCallback;
                    this.preventCustomPopupCloseCallback(), await (this.popups ? .open(e, (() => {
                        this.shouldRunCustomPopupCloseCallback && (this.rejectAuthenticationRequest(), t && t())
                    }))), this.shouldRunCustomPopupCloseCallback = i
                }
                preventCustomPopupCloseCallback() {
                    this.shouldRunCustomPopupCloseCallback = !1
                }
                allowCustomPopupCloseCallback() {
                    this.shouldRunCustomPopupCloseCallback = !0
                }
                assignRequestAuthenticationRejection(e) {
                    this.requestAuthenticationRejectInstance = this.requestAuthenticationRejectInstance || e
                }
                assignRequestAuthenticationResolveInstance(e) {
                    this.requestAuthenticationResolveInstance = this.requestAuthenticationResolveInstance || e
                }
                assignRequestAuthenticationPromise(e, t) {
                    this.requestAuthenticationRejectInstance = this.requestAuthenticationRejectInstance || t, this.requestAuthenticationResolveInstance = this.requestAuthenticationResolveInstance || e
                }
                rejectAuthenticationRequest() {
                    this.requestAuthenticationRejectInstance && (this.requestAuthenticationRejectInstance(_.qd.CANCELED), this.reset())
                }
                resolveAuthenticationRequest(e) {
                    this.requestAuthenticationRejectInstance && (this.requestAuthenticationResolveInstance(e), this.reset())
                }
                setConfig({
                    isCloseable: e = !0,
                    returnPages: t = !1
                }) {
                    this.config = {
                        isCloseable: e,
                        returnPages: t
                    }
                }
                reset() {
                    this.onReset ? .(), this.requestAuthenticationRejectInstance = void 0, this.requestAuthenticationResolveInstance = void 0, this.config = U
                }
            }
            var B, V, F, q, W, x, $, H = i(15772),
                G = i(73699),
                j = {},
                K = {
                    memberPrivacySettings: "_memberPrivacySettings"
                },
                J = {
                    updatedDate: "google.protobuf.Timestamp"
                };

            function Y(e) {
                return (0, H.O2)(Object.assign(e, {
                    domainToMappings: {
                        "editor.wixapps.net": [{
                            srcPath: "/_api/members/v1/privacy-settings",
                            destPath: "/v1/privacy-settings"
                        }],
                        "api._api_base_domain_": [{
                            srcPath: "/members/v1/privacy-settings",
                            destPath: ""
                        }],
                        "manage._base_domain_": [{
                            srcPath: "/_api/members/v1/privacy-settings",
                            destPath: "/v1/privacy-settings"
                        }],
                        "editor._base_domain_": [{
                            srcPath: "/_api/members/v1/privacy-settings",
                            destPath: "/v1/privacy-settings"
                        }],
                        "blocks._base_domain_": [{
                            srcPath: "/_api/members/v1/privacy-settings",
                            destPath: "/v1/privacy-settings"
                        }],
                        "create.editorx": [{
                            srcPath: "/_api/members/v1/privacy-settings",
                            destPath: "/v1/privacy-settings"
                        }],
                        "www.wixapis.com": [{
                            srcPath: "/members/v1/privacy-settings",
                            destPath: "/v1/privacy-settings"
                        }],
                        _: [{
                            srcPath: "/_api/members/v1/privacy-settings",
                            destPath: "/v1/privacy-settings"
                        }],
                        "www._base_domain_": [{
                            srcPath: "/_api/members/v1/privacy-settings",
                            destPath: "/v1/privacy-settings"
                        }],
                        "*.dev.wix-code.com": [{
                            srcPath: "/_api/members/v1/privacy-settings",
                            destPath: "/v1/privacy-settings"
                        }],
                        "bo._base_domain_": [{
                            srcPath: "/_api/members/v1/privacy-settings",
                            destPath: "/v1/privacy-settings"
                        }],
                        "wixbo.ai": [{
                            srcPath: "/_api/members/v1/privacy-settings",
                            destPath: "/v1/privacy-settings"
                        }],
                        "apps._base_domain_": [{
                            srcPath: "/_api/members/v1/privacy-settings",
                            destPath: "/v1/privacy-settings"
                        }]
                    }
                }))
            }! function(e) {
                e.UNKNOWN = "UNKNOWN", e.VISIBLE_TO_MEMBERS_ONLY = "VISIBLE_TO_MEMBERS_ONLY", e.VISIBLE_TO_ALL = "VISIBLE_TO_ALL"
            }(B || (B = {})),
            function(e) {
                e.UNKNOWN = "UNKNOWN", e.NO_ONE = "NO_ONE", e.ANYONE = "ANYONE"
            }(V || (V = {})),
            function(e) {
                e.UNKNOWN = "UNKNOWN", e.ENABLED = "ENABLED", e.DISABLED = "DISABLED", e.PENDING = "PENDING", e.DEMO = "DEMO"
            }(F || (F = {})),
            function(e) {
                e.OTHER = "OTHER", e.FROM_TEMPLATE = "FROM_TEMPLATE", e.DUPLICATE_BY_SITE_TRANSFER = "DUPLICATE_BY_SITE_TRANSFER", e.DUPLICATE = "DUPLICATE", e.OLD_SITE_TRANSFER = "OLD_SITE_TRANSFER", e.FLASH = "FLASH"
            }(q || (q = {})),
            function(e) {
                e.UNKNOWN_NAMESPACE = "UNKNOWN_NAMESPACE", e.WIX = "WIX", e.SHOUT_OUT = "SHOUT_OUT", e.ALBUMS = "ALBUMS", e.WIX_STORES_TEST_DRIVE = "WIX_STORES_TEST_DRIVE", e.HOTELS = "HOTELS", e.CLUBS = "CLUBS", e.ONBOARDING_DRAFT = "ONBOARDING_DRAFT", e.DEV_SITE = "DEV_SITE", e.LOGOS = "LOGOS", e.VIDEO_MAKER = "VIDEO_MAKER", e.PARTNER_DASHBOARD = "PARTNER_DASHBOARD", e.DEV_CENTER_COMPANY = "DEV_CENTER_COMPANY", e.HTML_DRAFT = "HTML_DRAFT", e.SITELESS_BUSINESS = "SITELESS_BUSINESS", e.CREATOR_ECONOMY = "CREATOR_ECONOMY", e.DASHBOARD_FIRST = "DASHBOARD_FIRST", e.ANYWHERE = "ANYWHERE", e.HEADLESS = "HEADLESS", e.ACCOUNT_MASTER_CMS = "ACCOUNT_MASTER_CMS", e.RISE = "RISE", e.BRANDED_FIRST = "BRANDED_FIRST"
            }(W || (W = {})),
            function(e) {
                e.UNKNOWN = "UNKNOWN", e.TRASH = "TRASH", e.DELETED = "DELETED", e.PENDING_PURGE = "PENDING_PURGE"
            }(x || (x = {})),
            function(e) {
                e.UNKNOWN = "UNKNOWN", e.ANONYMOUS_VISITOR = "ANONYMOUS_VISITOR", e.MEMBER = "MEMBER", e.WIX_USER = "WIX_USER", e.APP = "APP"
            }($ || ($ = {}));
            const z = e => {
                    const t = e.joinCommunityCheckedByDefault ? ? !0,
                        i = e.privacyNoteType ? ? "CHECKBOX";
                    return t ? i : "CHECKBOX"
                },
                X = e => "NOTE" === z(e) || (e.joinCommunityCheckedByDefault ? ? !0),
                Q = async (e, t) => {
                    const {
                        data: i
                    } = await e.request(function(e) {
                        var t = (0, G.d)(j, {}),
                            i = t.toJSON,
                            a = t.fromJSON,
                            o = (0, G.d)(K, {
                                _memberPrivacySettings: J
                            }).fromJSON;

                        function s(t) {
                            var a = t.host,
                                s = i(e);
                            return {
                                entityFqdn: "wix.members.v1.member_privacy_settings",
                                method: "GET",
                                methodFqn: "com.wixpress.members.memberprivacysettings.MemberPrivacySettingsService.GetMemberPrivacySettings",
                                url: Y({
                                    protoPath: "/v1/privacy-settings",
                                    data: s,
                                    host: a
                                }),
                                params: (0, H.bU)(s),
                                transformResponse: o
                            }
                        }
                        return s.fromReq = a, s.__isAmbassador = !0, s
                    }({}), {
                        signedInstance: t
                    });
                    return i.memberPrivacySettings
                },
                Z = {
                    [I.APPROVED]: "ACTIVE",
                    [I.PENDING]: "PENDING"
                };
            var ee = i(85583),
                te = {
                    numValue: "DOUBLE",
                    dateValue: "google.protobuf.Timestamp",
                    listValue: "_commonListValue",
                    mapValue: "_commonMapValue"
                },
                ie = {
                    value: "_commonCustomValue"
                },
                ae = {
                    value: "Map#_commonCustomValue"
                },
                oe = {
                    value: "_customValue"
                },
                se = {
                    numValue: "DOUBLE",
                    dateValue: "google.protobuf.Timestamp",
                    listValue: "_listValue",
                    mapValue: "_mapValue"
                },
                ne = {
                    createdDate: "google.protobuf.Timestamp",
                    updatedDate: "google.protobuf.Timestamp",
                    identityProfile: "_identityProfile"
                },
                re = {
                    customFields: "_customField"
                },
                ce = {
                    value: "_customValue"
                },
                le = {},
                ue = {},
                de = {
                    value: "Map#_customValue"
                },
                ge = {
                    body: "BYTES"
                },
                me = {
                    profile: "_identityProfile"
                },
                pe = {
                    identity: "_identity",
                    additionalData: "Map#_commonCustomValue"
                };

            function he(e) {
                return (0, H.O2)(Object.assign(e, {
                    domainToMappings: {
                        _: [{
                            srcPath: "/_api/iam/authentication",
                            destPath: ""
                        }],
                        "users._base_domain_": [{
                            srcPath: "/iam/wix/google",
                            destPath: "/v1/sso/callback/root/0e6a50f5-b523-4e29-990d-f37fa2ffdd69"
                        }, {
                            srcPath: "/authentication",
                            destPath: ""
                        }],
                        "www.wixapis.com": [{
                            srcPath: "/_api/iam/authentication",
                            destPath: ""
                        }],
                        "bo._base_domain_": [{
                            srcPath: "/_api/iam/authentication",
                            destPath: ""
                        }],
                        "wixbo.ai": [{
                            srcPath: "/_api/iam/authentication",
                            destPath: ""
                        }],
                        "dev._base_domain_": [{
                            srcPath: "/_api/iam/authentication",
                            destPath: ""
                        }],
                        "manage._base_domain_": [{
                            srcPath: "/_api/authentication",
                            destPath: ""
                        }],
                        "www._base_domain_": [{
                            srcPath: "/_api/iam/authentication",
                            destPath: ""
                        }]
                    }
                }))
            }
            var Se = {},
                be = {
                    body: "BYTES"
                };

            function Ce(e) {
                return (0, H.O2)(Object.assign(e, {
                    domainToMappings: {
                        "manage._base_domain_": [{
                            srcPath: "/_api/cookie",
                            destPath: ""
                        }],
                        _: [{
                            srcPath: "/_api/iam/cookie",
                            destPath: ""
                        }],
                        "bo._base_domain_": [{
                            srcPath: "/_api/iam/cookie",
                            destPath: ""
                        }],
                        "wixbo.ai": [{
                            srcPath: "/_api/iam/cookie",
                            destPath: ""
                        }],
                        "www._base_domain_": [{
                            srcPath: "/_api/iam/cookie",
                            destPath: ""
                        }],
                        "dev._base_domain_": [{
                            srcPath: "/_api/iam/cookie",
                            destPath: ""
                        }]
                    }
                }))
            }
            var Ee = i(82884),
                Pe = {
                    numValue: "DOUBLE",
                    dateValue: "google.protobuf.Timestamp",
                    listValue: "_commonListValue",
                    mapValue: "_commonMapValue"
                },
                fe = {
                    value: "_commonCustomValue"
                },
                we = {
                    value: "Map#_commonCustomValue"
                },
                ye = {
                    value: "_customValue"
                },
                _e = {
                    numValue: "DOUBLE",
                    dateValue: "google.protobuf.Timestamp",
                    listValue: "_listValue",
                    mapValue: "_mapValue"
                },
                De = {
                    createdDate: "google.protobuf.Timestamp",
                    updatedDate: "google.protobuf.Timestamp",
                    identityProfile: "_identityProfile"
                },
                ve = {
                    customFields: "_customField"
                },
                Ae = {
                    value: "_customValue"
                },
                Ie = {
                    value: "Map#_customValue"
                },
                Ne = {
                    identity: "_identity",
                    additionalData: "Map#_commonCustomValue"
                },
                Oe = {};

            function Te(e) {
                return (0, H.O2)(Object.assign(e, {
                    domainToMappings: {
                        "www.wixapis.com": [{
                            srcPath: "/_api/iam/verification",
                            destPath: ""
                        }],
                        _: [{
                            srcPath: "/_api/iam/verification",
                            destPath: ""
                        }],
                        "www._base_domain_": [{
                            srcPath: "/_api/iam/verification",
                            destPath: ""
                        }]
                    }
                }))
            }
            const Re = (e, t, i) => {
                    document.cookie = `${e}=;max-age=0`, document.cookie = `${e}=;max-age=0;path=${t}`, document.cookie = `${e}=;domain=${i};max-age=0`, document.cookie = `${e}=;domain=${i};max-age=0;path=${t}`
                },
                Le = (0, a.Og)([(0, a.KT)(o.YG, D.UU), (0, a.KT)(o._K, D.UU), (0, a.KT)(o.wk, D.UU), (0, a.KT)(o.AF, D.UU), s.F, n.Ht, n.TQ, S.i$, r.Ji, r.eZ, n.dn, n.RV, b.Ix, (0, a.lq)(C.j), b.$1, c.F, l.O$, (0, a.lq)(E.KK), (0, a.lq)(P.i), u.t7, d.n, (0, a.lq)(g.Z), (0, a.lq)(R.j), (0, a.lq)(T.U)], ((e, t, i, a, o, s, n, r, c, l, u, d, g, S, b, C, E, P, f = {
                    trackEvent: () => 0
                }, D, A, I, T, R) => {
                    const k = (0, m.o)(),
                        {
                            loginSocialBarOnSite: U,
                            protectedHomepage: B,
                            smSessionCookie: F,
                            memberInfoAppId: q,
                            membersInfoAppDefId: W,
                            smcollectionId: x,
                            isTemplate: $
                        } = e;
                    let {
                        sm_efCookie: j
                    } = e;
                    const K = "22bef345-3c5b-4c18-b782-74d4085112ff",
                        J = r.getUserSession(),
                        Y = () => r.getAppInstanceByAppDefId(K) || "",
                        Le = () => (0, O.YA)(r),
                        ke = A["specs.thunderbolt.deprecateAppId"],
                        {
                            smSettings: Ue,
                            tpaAppDefinitionIds: Me,
                            tpaApplicationIds: Be,
                            tpaPageIds: Ve,
                            policyLinks: Fe,
                            translations: qe
                        } = t,
                        We = ke ? Me[W] : q && Be[q],
                        {
                            metaSiteId: xe,
                            externalBaseUrl: $e,
                            siteId: He,
                            siteRevision: Ge
                        } = n.site,
                        je = n.requestUrl,
                        Ke = n.viewMode,
                        Je = n.anywhereConfig ? .siteId ? ? He,
                        Ye = n.anywhereConfig ? .revision ? ? Ge,
                        ze = -1 !== _.UG.findIndex((e => d ? .navigator ? .userAgent ? .includes(e))),
                        Xe = !ze,
                        Qe = !ze,
                        Ze = `/_api/wix-sm-webapp/tokens/verify/${xe}/${Je}`,
                        et = `${$e.replace(/\/$/,"")}/api/wix-sm/v1/authorize/${Je}/pages`,
                        tt = `/_api/wix-sm-webapp/tokens/logout/${xe}`,
                        it = `/_api/wix-sm-webapp/member/changePasswordWithMailToken?metaSiteId=${xe}&collectionId=${x}`,
                        at = Ue.smFirstDialogLogin ? "login" : "signup",
                        {
                            socialLoginFacebookEnabled: ot,
                            socialLoginGoogleEnabled: st,
                            termsOfUse: nt,
                            privacyPolicy: rt,
                            codeOfConduct: ct,
                            customSignUpPageId: lt,
                            customSignInPageId: ut
                        } = Ue,
                        {
                            privacyNoteType: dt,
                            joinCommunityCheckedByDefault: gt
                        } = (e => ({
                            privacyNoteType: z(e),
                            joinCommunityCheckedByDefault: X(e)
                        }))(Ue);
                    let {
                        smToken: mt
                    } = e, pt = {}, ht = F, St = null, bt = !1;
                    const Ct = e => {
                            St = e
                        },
                        Et = () => ({
                            registerToAppDidMount: Ct,
                            shouldWaitForAppDidMount: !bt
                        }),
                        Pt = async () => {
                            if (A["specs.thunderbolt.getMemberDetailsFromMembersNg"]) {
                                const {
                                    member: e
                                } = await Dt("/_api/members/v1/members/my?fieldsets=FULL", {
                                    headers: {
                                        authorization: r.getAppInstanceByAppDefId(K) ? ? ""
                                    }
                                }), {
                                    role: t
                                } = await (0, O.hv)((() => Dt(`/api/wix-sm/v1/members/${e?.id}/role`, {
                                    headers: {
                                        authorization: r.getAppInstanceByAppDefId(K) ? ? ""
                                    }
                                })), (() => ({
                                    role: N.MEMBER
                                })));
                                return (({
                                    member: e,
                                    role: t
                                }) => {
                                    return {
                                        id: e ? .id ? ? "",
                                        contactId: e ? .contactId ? ? "",
                                        loginEmail: e ? .loginEmail ? ? "",
                                        imageUrl: e ? .profile ? .photo ? .url ? ? "",
                                        nickname: e ? .profile ? .nickname ? ? "",
                                        profilePrivacyStatus: e ? .privacyStatus ? ? "",
                                        slug: e ? .profile ? .slug ? ? "",
                                        status: (a = e ? .status, a ? Z[a] ? ? "APPLICANT" : "APPLICANT"),
                                        creationDate: e ? .createdDate ? ? "",
                                        lastUpdateDate: e ? .updatedDate ? ? "",
                                        lastLoginDate: e ? .lastLoginDate ? ? "",
                                        emailVerified: e ? .loginEmailVerified ? ? !1,
                                        role: t ? ? "MEMBER",
                                        owner: t === N.OWNER,
                                        firstName: e ? .contact ? .firstName ? ? "",
                                        lastName: e ? .contact ? .lastName ? ? "",
                                        memberName: (i = e ? .contact, `${i?.firstName??""} ${i?.lastName??""}`.trim()),
                                        groups: void 0,
                                        emails: void 0,
                                        phones: void 0,
                                        addresses: void 0,
                                        labels: void 0,
                                        customFields: void 0
                                    };
                                    var i, a
                                })({
                                    member: e,
                                    role: t
                                })
                            }
                            const e = `/_api/wix-sm-webapp/member/${mt}?collectionId=${x}&metaSiteId=${xe}`,
                                {
                                    payload: t
                                } = await Dt(e);
                            return (0, O.Yv)(t)
                        },
                        ft = {},
                        wt = {},
                        yt = L({
                            sessionManager: r,
                            businessLogger: C,
                            wixBiSession: E,
                            viewMode: Ke ? .toUpperCase(),
                            language: u
                        });
                    yt.siteMembersFeatureLoaded();
                    const _t = {},
                        Dt = (0, O.I5)(o, {
                            credentials: "same-origin",
                            headers: {
                                accept: "application/json",
                                "x-wix-site-revision": `${Ye}`,
                                "x-wix-client-artifact-id": "thunderbolt"
                            }
                        }, je),
                        vt = (0, ee.u)({
                            isSSR: !1
                        }),
                        At = ((e, t) => {
                            let i;
                            return {
                                canHavePublicMembers: async () => i || (i = new Promise((async i => {
                                    const a = await Q(e, t()),
                                        o = a ? .publicMemberCandidates;
                                    i(o === V.ANYONE)
                                })), i)
                            }
                        })(vt, Y),
                        It = ((e, t, i, a, o) => new v(e, t, i, a, o))(c, l, S, d, T),
                        Nt = new URL(je).searchParams,
                        Ot = {};
                    Nt.forEach(((e, t) => {
                        Ot[t] = e
                    }));
                    const Tt = (e => {
                            let {
                                query: t
                            } = e;
                            const i = w().tryParse(null == t ? void 0 : t.headlessExternalUrls, {}) ? ? {};
                            return null == i ? void 0 : i.headlessClientId
                        })({
                            query: Ot
                        }),
                        Rt = ((e, t, i, a, o, s) => {
                            let n;
                            const r = "/_serverless/collection-settings-facade/get-settings",
                                c = async () => n || e(s ? `${r}?clientId=${s}` : r, {
                                    headers: {
                                        "Content-Type": "application/json",
                                        authorization: o()
                                    },
                                    credentials: "omit"
                                }).then((e => (n = e, n))),
                                l = async () => c().then((e => e.collectionSettings));
                            return {
                                getSiteMembersSettings: l,
                                getCaptchaSettings: () => l().then(O.YG).catch((e => (t.captureError(e, {
                                    tags: {
                                        feature: "site-members"
                                    }
                                }), i.trackEvent((0, _.SU)(_.WW.ACTIONS.SETTINGS.FAIL)), {
                                    invisible: {
                                        login: !1,
                                        signup: !1
                                    },
                                    visible: {
                                        login: !1,
                                        signup: !0
                                    }
                                }))),
                                getEnabledConnections: e => c().then((t => t.enabledConnections.filter((({
                                    appDefId: t
                                }) => !1 !== e[t])) ? ? [])),
                                getLoginRedirectUrl: () => c().then((e => e.loginUrl)),
                                getLogoutRedirectUrl: () => c().then((e => e.logoutUrl))
                            }
                        })(Dt, s, f, 0, (() => Y()), Tt),
                        Lt = (0, O.bR)(d),
                        kt = (0, O.Ed)(d, k),
                        Ut = new M(P, (async () => {
                            const e = await Rt.getCaptchaSettings();
                            (e.invisible.login || e.invisible.signup) && kt.hideCaptchaBadge()
                        })),
                        Mt = R ? .getBsi(),
                        Bt = Mt ? Mt.split("|")[0] : "00000000-0000-0000-0000-000000000000",
                        Vt = e => {
                            s.interactionStarted(_.sH.SOCIAL_APP_LOGIN_WITH_VENDOR(e))
                        },
                        Ft = {
                            appDidMount() {
                                St && St(), bt = !0
                            },
                            async handleSocialLoginResponse(e, t, i = !1) {
                                const a = _.UI[t] ? ? t;
                                s.interactionStarted(_.sH.SOCIAL_APP_LOGIN), s.interactionEnded(_.sH.SOCIAL_APP_LOGIN), s.interactionEnded(_.sH.SOCIAL_APP_LOGIN_WITH_VENDOR(a)), f.trackEvent((0, _.SU)(_.WW.ACTIONS.LOGIN.SUBMIT, a)), A["specs.thunderbolt.useNewPostLoginRedirect"] || (0, O._y)(d, je, {});
                                const o = await Ft.handleIAMLoginResponseV1(e, i);
                                return f.trackEvent((0, _.SU)(_.WW.ACTIONS.LOGIN.SUCCESS, a)), o
                            },
                            async handleIAMLoginResponseV1(e, t = !1) {
                                if (e.identity ? .status ? .name === Ee.EH.PENDING) return Ft.showAdminApprovalDialog(e.identity.email ? .address ? ? "");
                                const i = (0, O.N3)(e),
                                    a = e.sessionToken,
                                    o = (0, O.FB)(e.additionalData ? .protectedPages);
                                if ((0, O._y)(d, je, {
                                        sessionToken: a
                                    }) && A["specs.thunderbolt.useNewPostLoginRedirect"]) return (0, O.yw)();
                                const s = await Ft.applySessionToken(a, i, t && !o, !!o);
                                return {
                                    sessionToken: a,
                                    member: i,
                                    ...t ? {
                                        pages: o ? ? s
                                    } : {}
                                }
                            },
                            async promptLogin(e = {}, t = Ut.config ? .isCloseable ? ? !0, i = Ut.config ? .returnPages ? ? !1) {
                                const {
                                    mode: a,
                                    modal: o
                                } = e, s = "login" === (a ? ? at), n = o ? "popup" : "fullscreen";
                                return $ ? (await Ft.showNotificationDialog(qe.templateNotificationTitle, qe.templateNotificationMessage, qe.containerOk), Promise.reject(_.qd.CANCELED)) : (kt.loadScript(u.userLanguage, _.c8), s ? Ft.showLoginDialog({
                                    isCloseable: t,
                                    displayMode: n,
                                    returnPages: i
                                }) : Ft.showSignUpDialog({
                                    isCloseable: t,
                                    displayMode: n,
                                    returnPages: i
                                }))
                            },
                            promptForgotPassword(e = !0) {
                                return new Promise(((t, i) => {
                                    Ut.assignRequestAuthenticationPromise(t, i);
                                    const a = {
                                            isCloseable: e,
                                            directionByLanguage: u.directionByLanguage,
                                            translations: qe
                                        },
                                        o = {
                                            async onCloseDialogCallback() {
                                                (0, O.Fy)(je, d), yt.closingDialog("RequestResetPassword"), It.hideDialog(), Ut.rejectAuthenticationRequest()
                                            },
                                            onSubmitCallback(e) {
                                                return Ft.sendForgotPasswordMail(e).then((async () => {
                                                    const e = () => {
                                                        (0, O.Fy)(je, d), Ut.resolveAuthenticationRequest(), i(_.qd.CANCELED)
                                                    };
                                                    Ft.showNotificationDialog(qe.resetPasswordCheckEmailTitle, qe.resetPasswordCheckEmailText, qe.resetPasswordOk, e, e)
                                                }))
                                            }
                                        },
                                        s = Et();
                                    if (A["specs.ident.usePlatformizedSMAuth"]) {
                                        const e = Ve[_.$m.FORGOT_PASSWORD];
                                        if (e) return P ? .open(e)
                                    }
                                    It.displayDialog("RequestPasswordResetDialog", a, o, s)
                                }))
                            },
                            async requestAuthentication(e = {}) {
                                if (ht) return {
                                    success: !0,
                                    token: ht,
                                    reason: _.qd.ALREADY_LOGGED_IN
                                };
                                try {
                                    const t = !B,
                                        {
                                            sessionToken: i
                                        } = await Ft.promptLogin(e, t);
                                    return {
                                        success: !0,
                                        token: i,
                                        reason: _.qd.SUCCESS
                                    }
                                } catch (e) {
                                    return {
                                        success: !1,
                                        reason: e
                                    }
                                }
                            },
                            async requestAuthorizedPages(e = {}) {
                                if (mt) {
                                    return {
                                        success: !0,
                                        pages: await Ft.authorizeMemberPagesBySignedInstance(Y())
                                    }
                                }
                                try {
                                    const t = !B;
                                    Ut.setConfig({
                                        isCloseable: t,
                                        returnPages: !0
                                    });
                                    const i = await Ft.promptLogin(e, t, !0);
                                    return Ut.reset(), {
                                        success: !0,
                                        pages: i.pages
                                    }
                                } catch (e) {
                                    return {
                                        success: !1,
                                        reason: e
                                    }
                                }
                            },
                            async applySessionToken(e, t, i = !1, o = !1) {
                                if (A["specs.thunderbolt.preventApplySessionTokenInSSR"] && (0, p.fU)(d)) throw _.Nw;
                                s.interactionStarted(_.sH.VERIFY_TOKEN), o = !(!o && !A["specs.thunderbolt.alwaysApplySessionTokenOnIAM"]);
                                const n = await (o ? vt.request(function(e) {
                                    var t = (0, G.d)(Se, {}),
                                        i = t.toJSON,
                                        a = t.fromJSON,
                                        o = (0, G.d)(be, {}).fromJSON;

                                    function s(t) {
                                        var a = t.host,
                                            s = i(e);
                                        return {
                                            entityFqdn: "wix.iam.cookie.v1.cookie",
                                            method: "POST",
                                            methodFqn: "wix.iam.cookie.v1.CookieService.CreateSessionCookie",
                                            url: Ce({
                                                protoPath: "/v1/createSessionCookie",
                                                data: s,
                                                host: a
                                            }),
                                            data: s,
                                            transformResponse: o,
                                            fallback: [{
                                                method: "POST",
                                                url: Ce({
                                                    protoPath: "/v1/createSessionCookie",
                                                    data: s,
                                                    host: a
                                                }),
                                                data: s
                                            }]
                                        }
                                    }
                                    return s.fromReq = a, s.__isAmbassador = !0, s
                                }({
                                    sessionToken: e,
                                    protectedPages: i
                                }), {
                                    signedInstance: Y()
                                }).then((e => e.data)).catch((e => {
                                    throw e.response ? .data ? ? e
                                })) : Dt(Ze, {
                                    method: "POST",
                                    body: `token=${e}`
                                }).then((e => e.payload)));
                                var c;
                                if (s.interactionEnded(_.sH.VERIFY_TOKEN), await r.loadNewSession({
                                        reason: "memberLogin"
                                    }), mt = r.getSmToken(), ht = e, pt = t ? ? await Ft.getMemberDetails(), await (c = pt, Promise.all(Object.entries(ft).map((async ([e, t]) => {
                                        try {
                                            if ("$$$timeout$$$" === await Promise.race([t(c), (0, O.yy)(3e3).then((() => "$$$timeout$$$"))])) throw new Error(`callback ${e} timed out`)
                                        } catch (e) {
                                            s.captureError(e, {
                                                tags: {
                                                    feature: "site-members"
                                                }
                                            })
                                        }
                                    })))), a.export({
                                        memberDetails: pt
                                    }), i) {
                                    return o ? (0, O.FB)(n.protectedPages) : n.pages
                                }
                            },
                            async authorizeMemberPagesByCookie() {
                                const e = (0, p.fU)(d) ? {
                                        headers: {
                                            cookie: `smSession=${F}`
                                        }
                                    } : void 0,
                                    {
                                        authorizedPages: t
                                    } = await Dt(et, e);
                                return t
                            },
                            async authorizeMemberPagesByToken(e) {
                                if (e === F) return this.authorizeMemberPagesByCookie();
                                const {
                                    payload: t
                                } = await Dt(Ze, {
                                    method: "POST",
                                    body: `token=${e}`
                                }), {
                                    pages: i
                                } = t;
                                return i
                            },
                            async authorizeMemberPagesBySignedInstance(e) {
                                const t = {
                                        headers: {
                                            authorization: e
                                        }
                                    },
                                    {
                                        authorizedPages: i
                                    } = await Dt(et, t);
                                return i
                            },
                            async getMemberDetails(e = !1) {
                                return pt.id && !e ? pt : mt ? (pt = await Pt(), a.export({
                                    memberDetails: pt
                                }), e && await (t = pt, Promise.all(Object.values(_t).map((async e => {
                                    try {
                                        await e(t)
                                    } catch (e) {
                                        s.captureError(e, {
                                            tags: {
                                                feature: "site-members"
                                            }
                                        })
                                    }
                                })))), pt) : null;
                                var t
                            },
                            async sendForgotPasswordMail(e) {
                                s.interactionStarted(_.sH.RESET_PASSWORD);
                                const t = u.userLanguage,
                                    i = {
                                        url: (0, O.g9)(je) ? ? je
                                    },
                                    a = JSON.stringify({
                                        language: t,
                                        email: e,
                                        redirect: i
                                    }),
                                    o = {
                                        "Content-Type": "application/json",
                                        authorization: Y()
                                    };
                                await Dt("/_api/iam/recovery/v1/send-email", {
                                    headers: o,
                                    method: "POST",
                                    body: a
                                }), s.interactionEnded(_.sH.RESET_PASSWORD)
                            },
                            async sendSetPasswordEmail(e, t) {
                                const i = await Dt("/_api/wix-sm-webapp/members/v1/auth/members/send-set-password-email", {
                                    method: "POST",
                                    headers: {
                                        "Content-Type": "application/json",
                                        authorization: Y()
                                    },
                                    body: JSON.stringify({
                                        email: e,
                                        ...t ? .hideIgnoreMessage ? {
                                            hideIgnoreMessage: t.hideIgnoreMessage
                                        } : {}
                                    })
                                });
                                return !!i ? .accepted
                            },
                            async changePassword(e, t) {
                                const i = encodeURIComponent(e),
                                    a = t.startsWith(_.Zq),
                                    o = a ? "/_api/iam/recovery/v1/recover" : it,
                                    s = a ? JSON.stringify({
                                        password: e,
                                        recovery_token: t
                                    }) : `newPassword=${i}&forgotPasswordToken=${t}`,
                                    n = a ? {
                                        "Content-Type": "application/json",
                                        authorization: Y()
                                    } : void 0;
                                await Dt(o, {
                                    method: "POST",
                                    headers: n,
                                    body: s
                                })
                            },
                            async resendEmailVerification(e) {
                                await Dt(`/_api/wix-sm-webapp/tokens/email/resend/${e}`)
                            },
                            async logout(e) {
                                if (!mt) return !1;
                                if (A["specs.thunderbolt.logoutOnIAM"] ? await vt.request(function(e) {
                                        var t = (0, G.d)(ue, {}),
                                            i = t.toJSON,
                                            a = t.fromJSON,
                                            o = (0, G.d)(ge, {}).fromJSON;

                                        function s(t) {
                                            var a = t.host,
                                                s = i(e);
                                            return {
                                                entityFqdn: "wix.iam.authentication.v1.authentication",
                                                method: "GET",
                                                methodFqn: "wix.iam.authentication.v1.AuthenticationService.Logout",
                                                url: he({
                                                    protoPath: "/v1/logout",
                                                    data: s,
                                                    host: a
                                                }),
                                                params: (0, H.bU)(s),
                                                transformResponse: o
                                            }
                                        }
                                        return s.fromReq = a, s.__isAmbassador = !0, s
                                    }({}), {
                                        signedInstance: Y()
                                    }).catch((() => {
                                        f.trackEvent((0, _.SU)(_.WW.ACTIONS.LOGOUT.FAIL))
                                    })) : await Dt(tt, {
                                        method: "POST"
                                    }).catch((() => {
                                        f.trackEvent((0, _.SU)(_.WW.ACTIONS.LOGOUT.FAIL))
                                    })), await Promise.all(Object.entries(wt).map((async ([e, t]) => {
                                        try {
                                            if ("$$$timeout$$$" === await Promise.race([t(), (0, O.yy)(3e3).then((() => "$$$timeout$$$"))])) throw new Error(`callback ${e} timed out`)
                                        } catch (e) {
                                            s.captureError(e, {
                                                tags: {
                                                    feature: "site-members"
                                                }
                                            })
                                        }
                                    }))), e) {
                                    const t = `./${e.replace(/^\//,"")}`;
                                    await g.navigate(t)
                                }
                                const t = await Ft.getLogoutUrl();
                                return t ? d ? .location.replace(t) : (0, p.fU)(d) || d.document.location.reload(), !(!e && !t)
                            },
                            registerToUserLogin(e, t = (0, y.uniqueId)("callback")) {
                                return ft[t] = e, t
                            },
                            unRegisterToUserLogin(e) {
                                delete ft[e]
                            },
                            registerToMemberLogout(e) {
                                const t = (0, y.uniqueId)("logout_callback");
                                return wt[t] = e, t
                            },
                            unRegisterToMemberLogout(e) {
                                delete wt[e]
                            },
                            registerToMemberDetailsRefresh(e) {
                                const t = (0, y.uniqueId)("mdrcb");
                                return _t[t] = e, t
                            },
                            unRegisterToMemberDetailsRefresh(e) {
                                delete _t[e]
                            },
                            async showWelcomeDialog(e = !0) {
                                const t = {
                                        isCloseable: e,
                                        translations: qe
                                    },
                                    i = b.getParsedUrl(),
                                    a = {
                                        onCloseDialogCallback() {
                                            (0, O.Fy)(je, d), yt.closingDialog("WelcomeDialog");
                                            const e = new URL(je).hostname,
                                                t = 0 === e.indexOf("www") ? e.substr(3) : e;
                                            Re("sm_ef", "/", t), j = "", It.hideDialog(), g.navigate(i.href)
                                        },
                                        onSubmitCallback() {
                                            const e = new URL(je).hostname,
                                                t = 0 === e.indexOf("www") ? e.substr(3) : e;
                                            Re("sm_ef", "/", t), j = "", It.hideDialog(), We && g.navigate("./account/my-account"), g.navigate(i.href)
                                        }
                                    };
                                s.interactionStarted(_.sH.WELCOME_DIALOG), s.interactionEnded(_.sH.WELCOME_DIALOG), It.displayDialog("WelcomeDialog", t, a)
                            },
                            async showNoPermissionsToPageDialog(e) {
                                const t = {
                                    onCloseDialogCallback() {
                                        (0, O.Fy)(je, d), It.hideDialog(), e && e()
                                    },
                                    onSwitchAccountLinkClick() {
                                        Ft.logout()
                                    }
                                };
                                It.displayDialog("NoPermissionsToPageDialog", {
                                    translations: qe
                                }, t)
                            },
                            async showResetPasswordDialog(e) {
                                const t = {
                                        isCloseable: !0,
                                        isTermsOfUseNeeded: !(!nt ? .enabled || !Fe.termsOfUse),
                                        isPrivacyPolicyNeeded: !(!rt ? .enabled || !Fe.privacyPolicy),
                                        termsOfUseLink: Fe.termsOfUse,
                                        privacyPolicyLink: Fe.privacyPolicy,
                                        directionByLanguage: u.directionByLanguage,
                                        translations: qe
                                    },
                                    i = () => {
                                        const e = b.getParsedUrl();
                                        return e.searchParams.delete("forgotPasswordToken"), e.searchParams.delete("forgotPasswordLang"), b.pushUrlState(e), e
                                    },
                                    a = {
                                        onCloseDialogCallback() {
                                            (0, O.Fy)(je, d), yt.closingDialog("ResetPasswordDialog");
                                            const e = i();
                                            It.hideDialog(), g.navigate(e.href)
                                        },
                                        async onSubmitCallback(a) {
                                            try {
                                                await Ft.changePassword(a, e), Ft.showNotificationDialog(qe.resetPasswordSuccessTitle, "", qe.containerOk, (async () => {
                                                    if (e.startsWith(_.Zq)) {
                                                        const e = new URL(je).searchParams.get("redirectUrl");
                                                        if (e) return d ? .location.replace(e)
                                                    }
                                                    const t = i();
                                                    await Ft.showLoginDialog(), g.navigate(t.href)
                                                }))
                                            } catch (e) {
                                                const i = (0, O.E2)(e).toString();
                                                if (i !== _.OQ.RESET_PASSWORD_TOKEN_EXPIRED && i !== _.OQ.NEW_RESET_PASSWORD_TOKEN_EXPIRED) throw e;
                                                Ft.showNotificationDialog(qe.passwordHasExpiredTitle, qe.passwordHasExpiredText, qe.passwordHasExpiredOk, (() => Ft.promptForgotPassword(t.isCloseable).then((() => {
                                                    const e = b.getParsedUrl();
                                                    g.navigate(e.href)
                                                }))))
                                            }
                                        }
                                    };
                                if (A["specs.ident.usePlatformizedSMAuth"]) {
                                    const e = Ve[_.$m.RESET_PASSWORD];
                                    if (e) return P ? .open(e)
                                }
                                It.displayDialog("ResetPasswordDialog", t, a, Et())
                            },
                            async showLoggedInResetPasswordDialog() {
                                const e = {
                                        isCloseable: !0,
                                        directionByLanguage: u.directionByLanguage,
                                        translations: qe
                                    },
                                    t = {
                                        onCloseDialogCallback() {
                                            yt.closingDialog("LoggedInResetPasswordDialog"), It.hideDialog()
                                        },
                                        async onSubmitCallback() {}
                                    };
                                It.displayDialog("LoggedInResetPasswordDialog", e, t, Et())
                            },
                            async showLoginDialog(e = {}, t) {
                                const {
                                    returnPages: i,
                                    isCloseable: a,
                                    displayMode: o
                                } = {
                                    isCloseable: !0,
                                    displayMode: "fullscreen",
                                    returnPages: !1,
                                    ...e
                                }, n = await Rt.getCaptchaSettings();
                                return kt.setCaptchaBadgeVisibility(n.invisible.login), ut && P ? .isLightbox(ut) ? Ft.showCustomAuthenticationDialog(ut, i) : new Promise((async (e, r) => {
                                    Ut.assignRequestAuthenticationPromise(e, r);
                                    const c = "Enabled" === A["specs.ShouldForceCaptchaVerificationOnLoginSpec"] || n.visible.login,
                                        [l, g] = (0, y.partition)(await Ft.getConnections(), {
                                            appDefId: _.ch.PASSWORD
                                        }),
                                        m = await Ft.getLoginUrl(),
                                        p = {
                                            bsi: Bt,
                                            displayMode: o,
                                            language: u.userLanguage,
                                            directionByLanguage: u.directionByLanguage,
                                            isCloseable: a,
                                            smCollectionId: x,
                                            svSession: J,
                                            biVisitorId: Le(),
                                            metaSiteId: xe,
                                            isEmailLoginEnabled: l.length > 0,
                                            idps: g,
                                            shouldForceCaptchaVerification: !n.invisible.login && c,
                                            isSocialAuthSupported: Xe,
                                            serverError: t,
                                            reportBi: C.reportBi,
                                            translations: qe,
                                            externalBaseUrl: Ft.getExternalBaseUrl(),
                                            headlessRedirectUrl: m
                                        },
                                        S = {
                                            onCloseDialogCallback() {
                                                (0, O.Fy)(je, d), It.hideDialog(), yt.closingDialog("MemberLoginDialog", o), Ut.rejectAuthenticationRequest()
                                            },
                                            submit(t, a, n) {
                                                return s.interactionStarted(_.sH.DEFAULT_LOGIN), yt.emailAuthSubmitClicked("MemberLoginDialog", o), Ft.login(t, a, n, i, void 0, !0).then((t => {
                                                    s.interactionEnded(_.sH.DEFAULT_LOGIN), It.hideDialog(), e(t)
                                                })).catch((e => {
                                                    throw (0, O.qi)(e) && s.interactionEnded(_.sH.DEFAULT_LOGIN), e
                                                }))
                                            },
                                            onForgetYourPasswordClick() {
                                                Ft.promptForgotPassword(a)
                                            },
                                            onSwitchDialogLinkClick() {
                                                Ft.showSignUpDialog({
                                                    isCloseable: a,
                                                    displayMode: o,
                                                    returnPages: i
                                                }).then(e, (() => {
                                                    Ut.rejectAuthenticationRequest()
                                                }))
                                            },
                                            onBackendSocialLogin(t, a) {
                                                return Ft.handleSocialLoginResponse(t, a, i).then((t => {
                                                    It.hideDialog(), e(t)
                                                }))
                                            },
                                            getHostReadyPayload: () => ({
                                                visitorId: Le(),
                                                svSession: J
                                            }),
                                            openCaptcha: (0, h.V1)({
                                                captcha: I,
                                                userLanguage: u.userLanguage
                                            }),
                                            reportSocialAuthStarted: Vt
                                        };
                                    yt.loginOrSignUpDialogLoaded("MemberLoginDialog", o), await It.displayDialog("MemberLoginDialog", p, S, Et()), Ft.closeCustomAuthenticationDialogs(!0)
                                }))
                            },
                            async showSignUpDialog(e = {}, t) {
                                const {
                                    returnPages: i,
                                    isCloseable: a,
                                    displayMode: o
                                } = {
                                    isCloseable: !0,
                                    displayMode: "fullscreen",
                                    returnPages: !1,
                                    ...e
                                }, n = await Rt.getCaptchaSettings();
                                if (kt.setCaptchaBadgeVisibility(n.invisible.signup), lt && P ? .isLightbox(lt)) return Ft.showCustomAuthenticationDialog(lt, i);
                                const r = "Enabled" !== A["specs.ShouldPassCaptchaVerificationOnSignupSpec"] && "Enabled" === A["specs.ShouldForceCaptchaVerificationOnSignupSpec"];
                                return new Promise((async (e, c) => {
                                    const l = r || n.visible.signup && "Enabled" !== A["specs.ShouldPassCaptchaVerificationOnSignupSpec"],
                                        [g, m] = (0, y.partition)(await Ft.getConnections(), {
                                            appDefId: _.ch.PASSWORD
                                        }),
                                        p = await Ft.getLoginUrl();
                                    Ut.assignRequestAuthenticationPromise(e, c);
                                    const S = {
                                            bsi: Bt,
                                            displayMode: o,
                                            language: u.userLanguage,
                                            directionByLanguage: u.directionByLanguage,
                                            isCloseable: a,
                                            smCollectionId: x,
                                            biVisitorId: Le(),
                                            svSession: J,
                                            metaSiteId: xe,
                                            isSocialAuthSupported: Xe,
                                            isEmailLoginEnabled: g.length > 0,
                                            idps: m,
                                            isCommunityInstalled: await At.canHavePublicMembers(),
                                            privacyNoteType: dt,
                                            joinCommunityCheckedByDefault: gt,
                                            isTermsOfUseNeeded: !(!nt ? .enabled || !Fe.termsOfUse),
                                            isPrivacyPolicyNeeded: !(!rt ? .enabled || !Fe.privacyPolicy),
                                            isCodeOfConductNeeded: !(!ct ? .enabled || !Fe.codeOfConduct),
                                            shouldForceCaptchaVerification: !n.invisible.signup && l,
                                            termsOfUseLink: Fe.termsOfUse,
                                            privacyPolicyLink: Fe.privacyPolicy,
                                            codeOfConductLink: Fe.codeOfConduct,
                                            serverError: t,
                                            reportBi: C.reportBi,
                                            translations: qe,
                                            externalBaseUrl: Ft.getExternalBaseUrl(),
                                            headlessRedirectUrl: p
                                        },
                                        b = {
                                            onCloseDialogCallback() {
                                                (0, O.Fy)(je, d), It.hideDialog(), yt.closingDialog("SignUpDialog", o), Ut.rejectAuthenticationRequest()
                                            },
                                            async submit(t, a, n) {
                                                let r;
                                                if (S.isCommunityInstalled) {
                                                    r = ("boolean" == typeof n ? n : n.isCommunityChecked) ? Ee.lS.PUBLIC : Ee.lS.PRIVATE
                                                }
                                                const c = "boolean" == typeof n ? void 0 : n ? .recaptchaToken;
                                                return s.interactionStarted(_.sH.DEFAULT_SIGNUP), yt.emailAuthSubmitClicked("SignUpDialog", o), Ft.register(t, a, void 0, r, !0, i, c, void 0).then((t => {
                                                    s.interactionEnded(_.sH.DEFAULT_SIGNUP);
                                                    const {
                                                        member: a,
                                                        sessionToken: o,
                                                        pages: n
                                                    } = t;
                                                    o && (It.hideDialog(!0), e({
                                                        member: a,
                                                        sessionToken: o,
                                                        ...i ? {
                                                            pages: n
                                                        } : {}
                                                    }))
                                                })).catch((e => {
                                                    throw (0, O.NU)(e) && s.interactionEnded(_.sH.DEFAULT_SIGNUP), e
                                                }))
                                            },
                                            onSwitchDialogLinkClick() {
                                                Ft.showLoginDialog({
                                                    isCloseable: a,
                                                    displayMode: o,
                                                    returnPages: i
                                                }).then(e, (() => {
                                                    Ut.rejectAuthenticationRequest()
                                                }))
                                            },
                                            onBackendSocialLogin(t, a) {
                                                return Ft.handleSocialLoginResponse(t, a, i).then((t => {
                                                    It.hideDialog(), e(t)
                                                }))
                                            },
                                            getHostReadyPayload: () => ({
                                                visitorId: Le(),
                                                svSession: J
                                            }),
                                            openCaptcha: (0, h.V1)({
                                                captcha: I,
                                                userLanguage: u.userLanguage
                                            }),
                                            reportSocialAuthStarted: Vt
                                        };
                                    yt.loginOrSignUpDialogLoaded("SignUpDialog", o), await It.displayDialog("SignUpDialog", S, b, Et()), Ft.closeCustomAuthenticationDialogs(!0)
                                }))
                            },
                            async hideAuthDialog() {
                                console.warn("hideAuthDialog is not supported")
                            },
                            async showNotificationDialog(e, t, i, a = (() => 0), o = (() => 0)) {
                                const s = {
                                        isCloseable: !0,
                                        title: e,
                                        description: t,
                                        okButtonText: i,
                                        translations: qe
                                    },
                                    n = {
                                        onCloseDialogCallback() {
                                            (0, O.Fy)(je, d), yt.closingDialog("NotificationDialog"), It.hideDialog(), o()
                                        },
                                        onOkButtonClick() {
                                            It.hideDialog(), a()
                                        }
                                    };
                                await It.displayDialog("NotificationDialog", s, n)
                            },
                            async showConfirmationEmailDialog(e, t = !0) {
                                return new Promise(((i, a) => {
                                    const o = {
                                            isCloseable: !0,
                                            isSignUp: t,
                                            translations: qe
                                        },
                                        s = {
                                            onCloseDialogCallback() {
                                                (0, O.Fy)(je, d), yt.closingDialog("ConfirmationEmailDialog"), It.hideDialog(), Ut.rejectAuthenticationRequest(), a(_.qd.CANCELED)
                                            },
                                            async onResendConfirmationEmail() {
                                                await Ft.resendEmailVerification(e), await Ft.showConfirmationEmailDialog(e, !1).catch(a)
                                            }
                                        };
                                    It.displayDialog("ConfirmationEmailDialog", o, s)
                                }))
                            },
                            async showAdminApprovalDialog(e) {
                                return new Promise(((t, i) => {
                                    const a = () => {
                                        (0, O._y)(d, je, {
                                            error: O.Mi.ACCESS_DENIED
                                        }), Ut.rejectAuthenticationRequest(), i(_.qd.CANCELED), Ft.closeCustomAuthenticationDialogs(!1)
                                    };
                                    Ft.showNotificationDialog("", `${qe.applySuccess1} ${qe.applySuccess2}`.replace("{0}", e), qe.containerOk, a, a)
                                }))
                            },
                            async showCustomAuthenticationDialog(e, t = !1) {
                                if (!P) throw new Error("popup unavailable");
                                return new Promise((async (i, a) => {
                                    Ut.assignRequestAuthenticationPromise(i, a);
                                    const o = Ft.registerToUserLogin((async () => {
                                        Ut.resolveAuthenticationRequest({
                                            member: pt,
                                            sessionToken: ht,
                                            ...t ? {
                                                pages: await Ft.authorizeMemberPagesBySignedInstance(Y())
                                            } : {}
                                        }), Ft.unRegisterToUserLogin(o), P.getCurrentLightboxId() === e && P.close()
                                    }), "customAuthCbId");
                                    await Ut.openPopupPage(e, (() => {
                                        Ft.unRegisterToUserLogin(o)
                                    })), It.hideDialog()
                                }))
                            },
                            async closeCustomAuthenticationDialogs(e = !1) {
                                const t = P ? .getCurrentLightboxId();
                                t && [lt, ut].includes(t) && (e && Ut.preventCustomPopupCloseCallback(), await P.close(), Ut.allowCustomPopupCloseCallback())
                            },
                            getForgotPasswordToken() {
                                return new URL((0, p.fU)(d) ? je : d.location.href).searchParams.get("forgotPasswordToken")
                            },
                            shouldDisplayWelcomeDialog() {
                                return j && We
                            },
                            async showVerificationCodeDialog(e, t = !0) {
                                return new Promise((async (i, a) => {
                                    s.interactionStarted(_.sH.VERIFICATION_CODE), yt.siteMembersEmailConfirmationNewMembersModalLoad(), Ut.assignRequestAuthenticationPromise(i, a);
                                    const o = {
                                            language: u.userLanguage,
                                            directionByLanguage: u.directionByLanguage,
                                            isCloseable: Ut.config ? .isCloseable ? ? !0,
                                            displayMode: "customPopup",
                                            email: e ? .email,
                                            error: e ? .error,
                                            translations: qe,
                                            isAuthV2Enabled: !0
                                        },
                                        n = {
                                            async onResendVerificationCodeEmail() {
                                                yt.siteMembersEmailConfirmationOnResendCodeClick(), await Dt("/_api/iam/state-machine-service/v1/proceed", {
                                                    method: "POST",
                                                    headers: {
                                                        "Content-Type": "application/json",
                                                        authorization: Y()
                                                    },
                                                    body: JSON.stringify({
                                                        stateToken: e.stateToken
                                                    })
                                                })
                                            },
                                            onCloseDialogCallback() {
                                                yt.closingDialog("VerificationCode"), (0, O.Fy)(je, d), It.hideDialog(), Ut.rejectAuthenticationRequest(), a(_.qd.CANCELED)
                                            },
                                            onSubmitCallback(e) {
                                                yt.siteMembersEmailConfirmationSendCodeClick(), i(e)
                                            }
                                        };
                                    s.interactionEnded(_.sH.VERIFICATION_CODE), It.displayDialog("VerificationCodeDialog", o, n, void 0, t)
                                }))
                            },
                            async appWillMount() {
                                U && await Ft.getMemberDetails();
                                switch (new URL(n.requestUrl).searchParams.get("showDialog")) {
                                    case "MemberLoginDialog":
                                        Ft.showLoginDialog();
                                        break;
                                    case "SignUpDialog":
                                        Ft.showSignUpDialog();
                                        break;
                                    case "RequestPasswordResetDialog":
                                        Ft.promptForgotPassword();
                                        break;
                                    case "ResetPasswordDialog":
                                        Ft.showResetPasswordDialog("faketoken");
                                        break;
                                    case "LoggedInResetPasswordDialog":
                                        Ft.showLoggedInResetPasswordDialog();
                                        break;
                                    case "WelcomeDialog":
                                        Ft.showWelcomeDialog();
                                        break;
                                    case "NoPermissionsToPageDialog":
                                        Ft.showNoPermissionsToPageDialog();
                                        break;
                                    case "NotificationDialog":
                                        Ft.showNotificationDialog("title", "description", "ok");
                                        break;
                                    case "ConfirmationEmailDialog":
                                        Ft.showConfirmationEmailDialog("fakemember");
                                        break;
                                    case "VerificationCodeDialog":
                                        Ft.showVerificationCodeDialog({
                                            email: "testEmail@test.com"
                                        });
                                        break;
                                    case "ExpiredResetPasswordDialog":
                                        Ft.showNotificationDialog(qe.passwordHasExpiredTitle, qe.passwordHasExpiredText, qe.passwordHasExpiredOk, (() => Ft.promptForgotPassword(!1).then((() => {
                                            const e = b.getParsedUrl();
                                            g.navigate(e.href)
                                        }))))
                                }
                            },
                            pageWillUnmount({
                                pageId: e
                            }) {
                                [lt, ut].includes(e) || It.hideDialog()
                            },
                            getSocialAuthComponentProps() {
                                return (0, O._G)({
                                    config: e,
                                    viewerModel: n,
                                    sessionManager: r,
                                    bsiManager: R,
                                    handleSocialLoginResponse: Ft.handleSocialLoginResponse,
                                    isSocialAuthSupported: Qe,
                                    captcha: I,
                                    userLanguage: u.userLanguage,
                                    reportBi: C.reportBi,
                                    reportSocialAuthStarted: Vt,
                                    useNewSocialFlow: !0,
                                    translations: qe
                                })
                            },
                            async getConnections() {
                                const e = {
                                    [_.ch.FACEBOOK]: !0,
                                    [_.ch.GOOGLE]: !0,
                                    [_.ch.APPLE]: !1
                                };
                                return Rt.getEnabledConnections(e).then((e => e.map((({
                                    id: e,
                                    appDefId: t,
                                    displayName: i
                                }) => ({
                                    id: e,
                                    appDefId: t,
                                    name: i
                                })))))
                            },
                            getLoginUrl() {
                                if (Tt && A["specs.thunderbolt.shouldFetchLoginUrlByClientId"]) return Rt.getLoginRedirectUrl()
                            },
                            getLogoutUrl() {
                                if (Tt) return Rt.getLogoutRedirectUrl()
                            },
                            getExternalBaseUrl() {
                                return A["specs.thunderbolt.shouldUseExternalBaseUrl"] ? $e : void 0
                            },
                            async register(e, t, i, a, o, n, r, c) {
                                n = n ? ? !1;
                                try {
                                    const l = await Rt.getCaptchaSettings();
                                    if (l.visible.signup && "Enabled" !== A["specs.ShouldPassCaptchaVerificationOnSignupSpec"] && !r && !c ? .otp && !c ? .verificationId) throw _.pH;
                                    s.interactionStarted(_.sH.CODE_SIGNUP), f.trackEvent((0, _.SU)(_.WW.ACTIONS.SIGNUP.SUBMIT));
                                    const u = P ? .getCurrentLightboxId(),
                                        g = D.getCurrentRouteInfo() ? .pageId,
                                        m = o || lt && u && lt === u || lt && g && lt === g,
                                        p = l.invisible.signup && m ? await Lt(_.MA.SIGNUP) : void 0,
                                        h = A["specs.thunderbolt.convertBirthdateToISOString"],
                                        S = {
                                            profile: { ...(0, O.y0)(i || {}, h),
                                                privacyStatus: a,
                                                emails: [e]
                                            },
                                            loginId: {
                                                email: e
                                            },
                                            password: t,
                                            captchaTokens: [...r ? [{
                                                Recaptcha: r
                                            }] : [], ...p ? [{
                                                InvisibleRecaptcha: p
                                            }] : []]
                                        },
                                        b = await vt.request(function(e) {
                                            var t = (0, G.d)(me, {
                                                    _customField: oe,
                                                    _customValue: se,
                                                    _identityProfile: re,
                                                    _listValue: ce,
                                                    _mapValue: de
                                                }),
                                                i = t.toJSON,
                                                a = t.fromJSON,
                                                o = (0, G.d)(pe, {
                                                    _commonCustomValue: te,
                                                    _commonListValue: ie,
                                                    _commonMapValue: ae,
                                                    _customField: oe,
                                                    _customValue: se,
                                                    _identity: ne,
                                                    _identityProfile: re,
                                                    _listValue: ce,
                                                    _mapValue: de
                                                }).fromJSON;

                                            function s(t) {
                                                var a = t.host,
                                                    s = i(e);
                                                return {
                                                    entityFqdn: "wix.iam.authentication.v1.authentication",
                                                    method: "POST",
                                                    methodFqn: "wix.iam.authentication.v1.AuthenticationService.RegisterV2",
                                                    url: he({
                                                        protoPath: "/v2/register",
                                                        data: s,
                                                        host: a
                                                    }),
                                                    data: s,
                                                    transformResponse: o
                                                }
                                            }
                                            return s.fromReq = a, s.__isAmbassador = !0, s
                                        }(S), {
                                            signedInstance: Y()
                                        }).then((e => e.data)).catch((e => {
                                            throw e.response ? .data ? ? e
                                        }));
                                    s.interactionEnded(_.sH.CODE_SIGNUP);
                                    const C = await Ft.getStateMachine(b, e),
                                        E = C ? .additionalData ? .protectedPages,
                                        w = (0, O.FB)(E),
                                        y = (0, O.$e)(C);
                                    if ((0, O._y)(d, je, {
                                            sessionToken: C ? .sessionToken
                                        }) && A["specs.thunderbolt.useNewPostLoginRedirect"]) return (0, O.yw)();
                                    const v = await Ft.applySessionToken(C ? .sessionToken, y, n && !w, !0),
                                        I = w ? ? v;
                                    f.trackEvent((0, _.SU)(_.WW.ACTIONS.SIGNUP.SUCCESS)), f.trackEvent({
                                        eventName: "CompleteRegistration",
                                        params: {
                                            origin: "Site members",
                                            method: "Wix"
                                        }
                                    });
                                    const N = C ? .sessionToken;
                                    return {
                                        member: y,
                                        status: y.status,
                                        sessionToken: N,
                                        ...n && I ? {
                                            pages: I
                                        } : {}
                                    }
                                } catch (e) {
                                    throw (0, O.NU)(e) ? s.interactionEnded(_.sH.CODE_SIGNUP) : f.trackEvent((0, _.SU)(_.WW.ACTIONS.SIGNUP.FAIL)), e
                                }
                            },
                            async getStateMachine(e, t) {
                                const i = e ? .state;
                                return i === Ee.Gd.REQUIRE_OWNER_APPROVAL ? Ft.showAdminApprovalDialog(t) : i === Ee.Gd.REQUIRE_EMAIL_VERIFICATION ? Ft.verifyEmail(t, e ? .stateToken).then((e => (It.hideDialog(), Ft.getStateMachine(e, t)))) : e
                            },
                            async verifyEmail(e, t, i, a, o) {
                                try {
                                    const s = {
                                            stateToken: t || "",
                                            code: o ? ? await Ft.showVerificationCodeDialog({
                                                email: e,
                                                stateToken: t,
                                                error: a
                                            }, !i)
                                        },
                                        n = await vt.request(function(e) {
                                            var t = (0, G.d)(Oe, {}),
                                                i = t.toJSON,
                                                a = t.fromJSON,
                                                o = (0, G.d)(Ne, {
                                                    _commonCustomValue: Pe,
                                                    _commonListValue: fe,
                                                    _commonMapValue: we,
                                                    _customField: ye,
                                                    _customValue: _e,
                                                    _identity: De,
                                                    _identityProfile: ve,
                                                    _listValue: Ae,
                                                    _mapValue: Ie
                                                }).fromJSON;

                                            function s(t) {
                                                var a = t.host,
                                                    s = i(e);
                                                return {
                                                    entityFqdn: "wix.iam.verification.v1.start_response",
                                                    method: "POST",
                                                    methodFqn: "wix.iam.verification.v1.VerificationService.VerifyDuringAuthentication",
                                                    url: Te({
                                                        protoPath: "/v1/auth/verify",
                                                        data: s,
                                                        host: a
                                                    }),
                                                    data: s,
                                                    transformResponse: o
                                                }
                                            }
                                            return s.fromReq = a, s.__isAmbassador = !0, s
                                        }(s), {
                                            signedInstance: Y()
                                        });
                                    return n.data
                                } catch (i) {
                                    if (i === _.qd.CANCELED) throw i;
                                    const a = i ? .details ? .applicationError ? .code ? ? "BAD_CODE";
                                    return Ft.verifyEmail(e, t, !0, a)
                                }
                            },
                            async login(e, t, i, a = !1, o, s = !1) {
                                try {
                                    const n = await Rt.getCaptchaSettings();
                                    if (n.visible.login && !i ? .recaptchaToken && !o ? .otp && !o ? .verificationId) throw _.pH;
                                    f.trackEvent((0, _.SU)(_.WW.ACTIONS.LOGIN.SUBMIT));
                                    const r = P ? .getCurrentLightboxId(),
                                        c = D.getCurrentRouteInfo() ? .pageId,
                                        l = s || ut && r && ut === r || ut && c && ut === c,
                                        u = n.invisible.login && l ? await Lt(_.MA.LOGIN) : void 0,
                                        g = [];
                                    i ? .recaptchaToken && g.push({
                                        Recaptcha: i ? .recaptchaToken
                                    }), u && g.push({
                                        InvisibleRecaptcha: u
                                    });
                                    const m = {
                                            loginId: {
                                                email: e
                                            },
                                            password: t,
                                            captchaTokens: g
                                        },
                                        p = await vt.request(function(e) {
                                            var t = (0, G.d)(le, {}),
                                                i = t.toJSON,
                                                a = t.fromJSON,
                                                o = (0, G.d)(pe, {
                                                    _commonCustomValue: te,
                                                    _commonListValue: ie,
                                                    _commonMapValue: ae,
                                                    _customField: oe,
                                                    _customValue: se,
                                                    _identity: ne,
                                                    _identityProfile: re,
                                                    _listValue: ce,
                                                    _mapValue: de
                                                }).fromJSON;

                                            function s(t) {
                                                var a = t.host,
                                                    s = i(e);
                                                return {
                                                    entityFqdn: "wix.iam.authentication.v1.authentication",
                                                    method: "POST",
                                                    methodFqn: "wix.iam.authentication.v1.AuthenticationService.LoginV2",
                                                    url: he({
                                                        protoPath: "/v2/login",
                                                        data: s,
                                                        host: a
                                                    }),
                                                    data: s,
                                                    transformResponse: o
                                                }
                                            }
                                            return s.fromReq = a, s.__isAmbassador = !0, s
                                        }(m), {
                                            signedInstance: Y()
                                        }).then((e => e.data)).catch((e => {
                                            throw e.response ? .data ? ? e
                                        })),
                                        h = await Ft.getStateMachine(p, e),
                                        S = h ? .additionalData ? .protectedPages,
                                        b = (0, O.FB)(S),
                                        C = (0, O.$e)(h);
                                    if ((0, O._y)(d, je, {
                                            sessionToken: h ? .sessionToken
                                        }) && A["specs.thunderbolt.useNewPostLoginRedirect"]) return (0, O.yw)();
                                    const E = await Ft.applySessionToken(h ? .sessionToken, C, a && !b, !0),
                                        w = b ? ? E,
                                        y = h ? .sessionToken;
                                    return {
                                        sessionToken: y,
                                        member: C,
                                        ...a ? {
                                            pages: w
                                        } : {}
                                    }
                                } catch (t) {
                                    throw (0, O.qi)(t) || f.trackEvent({
                                        eventName: "CustomEvent",
                                        params: {
                                            eventCategory: "Site members",
                                            eventAction: "Log in Failure",
                                            eventLabel: "Wix"
                                        }
                                    }), t ? .details ? .applicationError ? .code === _.OQ.WAITING_APPROVAL && Ft.showAdminApprovalDialog(e), t ? .response ? .data ? ? t
                                }
                            }
                        };
                    return a.export({
                        promptLogin: Ft.promptLogin,
                        logout: Ft.logout,
                        memberDetails: pt
                    }), i.update((() => ({
                        shouldShowRenderingBlockingDialogs: () => !(!Ft.getForgotPasswordToken() && !Ft.shouldDisplayWelcomeDialog()),
                        showRenderingBlockingDialogs: () => {
                            const e = Ft.getForgotPasswordToken();
                            return e ? Ft.showResetPasswordDialog(e) : Ft.shouldDisplayWelcomeDialog() ? Ft.showWelcomeDialog() : void 0
                        }
                    }))), Ft
                }));
            var ke = i(16537),
                Ue = i(60950),
                Me = i(17840);
            const Be = (0, a.Og)([D.Np], (e => ({
                    getTpaHandlers() {
                        const t = async (t, i, a) => {
                                const o = await e.getMemberDetails(!0);
                                return o ? a.appClientSpecMapData ? .isWixTPA ? {
                                    attributes: {
                                        firstName: o.firstName ? ? "",
                                        lastName: o.lastName ? ? "",
                                        privacyStatus: o.profilePrivacyStatus
                                    },
                                    name: o.memberName,
                                    email: o.loginEmail,
                                    id: o.id,
                                    owner: o.owner,
                                    status: o.status
                                } : {
                                    id: o.id,
                                    owner: o.owner,
                                    status: o.status
                                } : null
                            },
                            i = async (t, i = {}) => {
                                const {
                                    member: a
                                } = await e.promptLogin({
                                    mode: i.mode,
                                    modal: i.modal
                                });
                                return {
                                    attributes: {
                                        firstName: a.firstName ? ? "",
                                        lastName: a.lastName ? ? "",
                                        privacyStatus: a.profilePrivacyStatus
                                    },
                                    name: a.memberName,
                                    email: a.loginEmail,
                                    id: a.id,
                                    owner: a.owner,
                                    status: a.status
                                }
                            };
                        return {
                            currentMember: t,
                            smCurrentMember: t,
                            logOutCurrentMember: (0, Me.V)(["site"], ((t, i) => {
                                e.logout(i ? .url)
                            })),
                            requestLogin: (0, Me.V)(["site"], i),
                            smRequestLogin: (0, Me.V)(["site"], i)
                        }
                    }
                }))),
                Ve = (0, a.Og)([D.Np, (0, a.KT)(o.Gp, D.UU), r.Ji], ((e, {
                    componentIds: t
                }, i) => ({
                    name: "site-members-components",
                    pageWillMount() {
                        const a = t.reduce(((t, i) => ({ ...t,
                            [i]: e.getSocialAuthComponentProps()
                        })), {});
                        i.update(a)
                    }
                }))),
                Fe = (0, a.Og)([(0, a.KT)(o.wk, D.UU)], (e => ({
                    handle: async t => {
                        const {
                            shouldShowRenderingBlockingDialogs: i,
                            showRenderingBlockingDialogs: a
                        } = e.get();
                        return i() ? (a(), null) : t
                    }
                }))),
                qe = e => {
                    e(D.Np, ke.$.AppWillMountHandler, ke.$.AppDidMountHandler).to(Le), e(b.po.BlockingDialogs).to(Fe)
                },
                We = e => {
                    e(Ue.dQ).to(Be), e(ke.$.PageWillMountHandler).to(Ve), e(ke.$.PageWillUnmountHandler).to((0, a.Og)([D.Np], (e => ({
                        pageWillUnmount(t) {
                            return e.pageWillUnmount(t)
                        }
                    }))))
                }
        }
    }
]);
//# sourceMappingURL=https://static.parastorage.com/services/wix-thunderbolt/dist/group_9.a2e67e09.chunk.min.js.map